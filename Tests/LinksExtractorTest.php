<?php

namespace Stamina\Tests\PhpQuery;

use phpQuery;
use phpQueryObject;
use PHPUnit_Framework_TestCase;
use Stamina\PhpQuery\LinksExtractor;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-21 at 18:18:07.
 */
class LinksExtractorTest extends PHPUnit_Framework_TestCase {

    protected $html = '
        <p><a href="/wiki/Chinese_people_in_Madagascar" title="Chinese people in Madagascar">Chinese</a>, 
        <a href="/wiki/Indians_in_Madagascar" title="Indians in Madagascar">Indian</a> and 
        <a href="http://en.wikipedia.org/wiki/Comoros" title="Comoros">Comorian</a> minorities are present in Madagascar, as well as a small European (primarily French) expatriate community. Emigration in the late 20th century has reduced these minority populations, occasionally in abrupt waves, such as the exodus of 
        <a href="/wiki/Comoros" title="Comoros">Comorans</a> in 1976, following anti-<a href="Comoros" title="Comoros">Comoran</a> riots in Mahajanga.
        <a href="//en.wikipedia.org/wiki/Comoros" title="Comoros">Comorans</a>
        <sup id="cite_ref-LOC_14-14" class="reference"><a href="#cite_note-LOC-14"><span>[</span>14<span>]</span></a></sup> 
        <a href="#" class="close">close</a>, <a href="javascript:void(0)" class="close">next</a>, 
        </p>
        ';
    /** @var phpQueryObject */
    protected $pq;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->pq = phpQuery::newDocumentHTML($this->html);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testGetAbsoluteUrl() {
        $le = new LinksExtractor('');
        $le->setBaseUrl('http://123.com');
        $this->assertEquals('http:', $le->baseProtocol);
        $this->assertEquals('//123.com', $le->baseHost);
        $this->assertEquals('/', $le->basePath);
        $this->assertEquals('javascript:void()', $le->getAbsoluteUrl('javascript:void()'));
        $this->assertEquals('http://321.com', $le->getAbsoluteUrl('http://321.com'));
        $this->assertEquals('http://321.com', $le->getAbsoluteUrl('//321.com'));
        $this->assertEquals('https://321.com', $le->getAbsoluteUrl('https://321.com'));
        $this->assertEquals('http://123.com/test', $le->getAbsoluteUrl('test'));
        $this->assertEquals('http://123.com', $le->getAbsoluteUrl(''));
        $this->assertEquals('http://123.com/', $le->getAbsoluteUrl('/'));

        $le->setBaseUrl('https://123.com/');
        $this->assertEquals('https://321.com', $le->getAbsoluteUrl('//321.com'));
        
        $le->setBaseUrl('http://123.com/');
        $this->assertEquals('//123.com', $le->baseHost);
        $this->assertEquals('/', $le->basePath);
        $this->assertEquals('http://123.com/test', $le->getAbsoluteUrl('test'));
        $this->assertEquals('http://123.com/test', $le->getAbsoluteUrl('/test'));
        $this->assertEquals('http://123.com/', $le->getAbsoluteUrl(''));
        $this->assertEquals('http://123.com/', $le->getAbsoluteUrl('/'));
        
        $le->setBaseUrl('http://123.com/abc');
        $this->assertEquals('//123.com', $le->baseHost);
        $this->assertEquals('/', $le->basePath);
        $this->assertEquals('http://123.com/test', $le->getAbsoluteUrl('test'));
        $this->assertEquals('http://123.com/test', $le->getAbsoluteUrl('/test'));
        $this->assertEquals('http://123.com/abc', $le->getAbsoluteUrl(''));
        $this->assertEquals('http://123.com/', $le->getAbsoluteUrl('/'));
        
        $le->setBaseUrl('http://123.com/abc/def');
        $this->assertEquals('//123.com', $le->baseHost);
        $this->assertEquals('/abc/', $le->basePath);
        $this->assertEquals('http://123.com/abc/test', $le->getAbsoluteUrl('test'));
        $this->assertEquals('http://123.com/test', $le->getAbsoluteUrl('/test'));
        $this->assertEquals('http://123.com/abc/def', $le->getAbsoluteUrl(''));
        $this->assertEquals('http://123.com/', $le->getAbsoluteUrl('/'));
        
        $le->setBaseUrl('http://123.com/abc/def?something/notpossible');
        $this->assertEquals('//123.com', $le->baseHost);
        $this->assertEquals('/abc/', $le->basePath);
        $this->assertEquals('http://123.com/abc/test', $le->getAbsoluteUrl('test'));
        $this->assertEquals('http://123.com/test', $le->getAbsoluteUrl('/test'));
        $this->assertEquals($le->baseUrl, $le->getAbsoluteUrl(''));
        $this->assertEquals('http://123.com/', $le->getAbsoluteUrl('/'));
        
        $le->setBaseUrl('http://123.com/abc/def/#');
        $this->assertEquals('//123.com', $le->baseHost);
        $this->assertEquals('/abc/def/', $le->basePath);
        $this->assertEquals('http://123.com/abc/def/test', $le->getAbsoluteUrl('test'));
        $this->assertEquals('http://123.com/test', $le->getAbsoluteUrl('/test'));
        $this->assertEquals('http://123.com/wiki/en/index.php?title=Special:AllPages', $le->getAbsoluteUrl('/wiki/en/index.php?title=Special:AllPages'));
    }
    
    /**
     * @covers Stamina\PhpQuery\LinksExtractor::findUrls
     * @todo   Implement testFindUrls().
     */
    public function testFindUrls() {
        
        $le = new LinksExtractor('a');
        $le->setBaseUrl('http://en.wikipedia.org/wiki/Indonesia');
        $links = $le->findUrls($this->pq);
        //var_dump($links);
        $this->assertEquals(3, count($links));
        $this->assertArrayHasKey('http://en.wikipedia.org/wiki/Chinese_people_in_Madagascar', $links);
        $this->assertArrayHasKey('http://en.wikipedia.org/wiki/Indians_in_Madagascar', $links);
        $this->assertArrayHasKey('http://en.wikipedia.org/wiki/Comoros', $links);
    }

}
